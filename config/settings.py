"""
Django settings for notification project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os, environ, socket
import boto3
from keycloak import KeycloakOpenID

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
env = environ.Env()
env.read_env(str(BASE_DIR + "/devops/app-backend/app.env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
API_VERSION = env('API_VERSION')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', default=False)

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

def get_ec2_instance_ip():
    ip = socket.gethostbyname(socket.gethostname())
    return ip

AWS_LOCAL_IP = get_ec2_instance_ip()
APP_URL = env('APP_URL')
HOST_URL = env('HOST_URL')

ALLOWED_HOSTS = [
    AWS_LOCAL_IP,
    APP_URL,
    HOST_URL,
]
# CSRF verification for admin panel -----------------------
TRUSTED_ORIGIN = []
for host in ALLOWED_HOSTS:
    TRUSTED_ORIGIN.append(''.join(('http://', host)))
CSRF_TRUSTED_ORIGINS = TRUSTED_ORIGIN
CSRF_TRUSTED_ORIGINS.append('http://localhost')
# CSRF verification for admin panel -----------------------
SITE_URL = env('CLIENT_URL')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # packages
    'django_extensions',
    'rest_framework',
    'health_check',                             # required
    'health_check.db',                          # stock Django health checkers
    # 'health_check.cache',
    'health_check.storage',
    'health_check.contrib.migrations',
    # 'health_check.contrib.celery',              # requires celery
    # 'health_check.contrib.celery_ping',         # requires celery
    # 'health_check.contrib.psutil',              # disk and memory utilization; requires psutil
    'health_check.contrib.s3boto3_storage',     # requires boto3 and S3BotoStorage backend
    # 'health_check.contrib.rabbitmq',            # requires RabbitMQ broker
    # 'health_check.contrib.redis',               # requires Redis broker

    # apps
    'apps.iam',
    'apps.utilities',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
AUTH_USER_MODEL = "iam.User"
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
APPEND_SLASH = True
# LOGIN_REDIRECT_URL = "/profile/"
# LOGOUT_REDIRECT_URL = "/"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    # postgres://postgres:123123@db:5432/db-local
    "default": env.db("DATABASE_URL", default="")
}
DATABASES["default"]["CONN_MAX_AGE"] = env.int("CONN_MAX_AGE", default=0)

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Rest Framework
REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'apps.utilities.exceptions.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'apps.iam.authentication.CustomJWTAuthentication'
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # "rest_framework.authentication.SessionAuthentication",
        # "rest_framework.authentication.BasicAuthentication",
        # 'rest_framework.schemas.coreapi.AutoSchema',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,  # Default to 20
    'PAGINATE_BY_PARAM': 'page_size',
    # Allow client to override, using `?page_size=xxx`.
    'MAX_PAGINATE_BY': 100,
    # Maximum limit allowed when using `?page_size=xxx`.
    'TEST_REQUEST_DEFAULT_FORMAT': 'json'
}

# JWT
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": False,
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ('Bearer', 'JWT'),
    "AUTH_HEADER_NAME":"HTTP_AUTHORIZATION",
}

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-sa'

TIME_ZONE = 'Asia/Riyadh'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
# S3 bucket configurations
# the media storage configurations
is_s3_enabled = eval(env('S3_ENABLED'))
if is_s3_enabled:
    DEFAULT_FILE_STORAGE = 'config.storage_backends.MediaStorage'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME')
    # AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    # AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_CUSTOM_DOMAIN = env('AWS_S3_CUSTOM_DOMAIN')
    AWS_LOCATION = env('AWS_LOCATION')
    AWS_LOCATION_MEDIA = env('AWS_LOCATION_MEDIA')
    STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
    MEDIA_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION_MEDIA)
else:
    AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME')
    # AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    # AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
# logger -----------------------------------------

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "aws": {
            "format": (
                u"%(asctime)s [%(levelname)-1s](%(module)s.%(funcName)s) %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    }
}
CLOUDWATCH_ENABLED = eval(env('CLOUDWATCH_ENABLED'))
CLOUDWATCH_LOG_GROUP = env('CLOUDWATCH_LOG_GROUP', default="")
CLOUDWATCH_STREAM_NAME = env('CLOUDWATCH_STREAM_NAME', default="")
log_client = boto3.client('logs', region_name=AWS_S3_REGION_NAME)
if CLOUDWATCH_ENABLED:
    logger_class = "watchtower.CloudWatchLogHandler"
    LOGGING['handlers'] = {
        "watchtower": {
            "level": "INFO",
            "class": logger_class,
            "boto3_client": log_client,
            "log_group": CLOUDWATCH_LOG_GROUP,
            "stream_name": CLOUDWATCH_STREAM_NAME,
            "formatter": "aws",
        },
    }
    LOGGING['loggers'] = {
        "django":{
            "level":"INFO",
            "handlers": ["watchtower"],
            "propagate": True,
        },
    }
else:
    logger_class = "logging.StreamHandler"
    LOGGING['handlers'] = {
        "default_handler": {
            "level": "INFO",
            "class": logger_class,
            "formatter": "aws",
        },
    }
    LOGGING['loggers'] = {
        "django":{
            "level":"INFO",
            "handlers": ["default_handler"],
            "propagate": True,
        },
    }
# logger -----------------------------------------
# aws xray config -------------------------------------------------
XRAY_ENABLED = eval(env('XRAY_ENABLED'))
XRAY_HOST = env('XRAY_HOST')
if XRAY_ENABLED:
    tracing_name = env('XRAY_TRACING_NAME')
    MIDDLEWARE.insert(0, 'aws_xray_sdk.ext.django.middleware.XRayMiddleware')
    INSTALLED_APPS.append('aws_xray_sdk.ext.django')
    XRAY_RECORDER = {
        "AWS_XRAY_DAEMON_ADDRESS": XRAY_HOST,
        'AUTO_INSTRUMENT': True,
        "AWS_XRAY_CONTEXT_MISSING": "LOG_ERROR",
        'AWS_XRAY_TRACING_NAME': tracing_name,
        'PLUGINS': (),
        'SAMPLING': True,
    }
# aws xray config -------------------------------------------------
# health check ------------------------------------
HEALTH_CHECK = {
    'DISK_USAGE_MAX': 90,  # percent
    'MEMORY_MIN' : 100,    # in MB
}
# health check ------------------------------------
CLIENT_URL = env('CLIENT_URL')
# -----------------------------------------------------------------------
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True

EMAIL_HOST = env('EMAIL_HOST')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_PORT = env('EMAIL_PORT')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
# -----------------------------------------------------------------------

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configure client
KEYCLOAK_CLIENT = KeycloakOpenID(server_url="http://iam.notifications.local:8080/",
                                 client_id="backend_service",
                                 realm_name="main",
                                 client_secret_key="<CLIENT_SECRET>")

# Get WellKnow
config_well_known = KEYCLOAK_CLIENT.well_known()